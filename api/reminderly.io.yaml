openapi: 3.0.0
info:
  version: "1.0.0"
  title: Reminderly.io UI
  description: This is the reminderly.io UI API
security:
  - accessCode:
      - read
      - write
paths:
  '/reminder/{id}':
    get:
      summary: Get a reminder for viewing its page.
      description: >-
        Gets a reminder based on id
      tags:
        - reminders
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Reminder'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a reminder based on id
      description: >-
        Update a reminder's status (confirm,cancel,reschedule,unsubscribe,etc)
      tags:
        - reminders
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/Reminder'
      responses:
        '200':
          $ref: '#/components/responses/Reminder'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /company:
    get:
      summary: Get all companies listed
      description: >-
        This gets all companies, with pagination supported
      tags:
        - companies
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/searchParam'
      responses:
        '200':
          $ref: '#/components/responses/ArrayOfCompanies'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Create a company
      description: >-
        This endpoint creates a company
      tags:
        - companies
      requestBody:
        $ref: '#/components/requestBodies/Company'
      responses:
        '201':
          $ref: '#/components/responses/Company'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/company/{id}':
    get:
      summary: Returns a company object
      description: >-
        This gets the company information by id
      tags:
        - companies
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Company'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update company information
      description: >-
        Add locations, customers, etc to the company
      tags:
        - companies
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/Company'
      responses:
        '200':
          $ref: '#/components/responses/Company'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a company by id
      description: >-
        Deletes a company from the system
      tags:
        - companies
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Company'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/company/checkout/{id}':
    get:
      summary: Change company context
      description: >-
        This checks out a company for the user currently logged in
      tags:
        - companies
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /campaign:
    get:
      summary: Get campaigns for current company
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - campaigns
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/searchParam'
      responses:
        '200':
          $ref: '#/components/responses/ArrayOfCampaigns'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Create a campaign
      description: >-
        This endpoint creates a campaign
      tags:
        - campaigns
      requestBody:
        $ref: '#/components/requestBodies/Campaign'
      responses:
        '201':
          $ref: '#/components/responses/Campaign'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/campaign/{id}':
    get:
      summary: Get a campaign by id
      description: >-
        This gets a campaign for the company currently checked out
      tags:
        - campaigns
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Campaign'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a campaign by id
      description: >-
        Update campaign information by id
      tags:
        - campaigns
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/Campaign'
      responses:
        '200':
          $ref: '#/components/responses/Campaign'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a campaign by id
      description: >-
        Delete a campaign by id for the company currently checked out
      tags:
        - campaigns
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Campaign'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /packet:
    get:
      summary: List data packets
      description: >-
        This lists all data packets for the company currently checked out
      tags:
        - packet
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/searchParam'
      responses:
        '200':
          $ref: '#/components/responses/ArrayOfPackets'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Create a packet for the current company
      description: >-
        Create a data packet for the company currently checked out
      tags:
        - packet
      requestBody:
        $ref: '#/components/requestBodies/Packet'
      responses:
        '201':
          $ref: '#/components/responses/Packet'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/packet/{id}':
    get:
      summary: Get a packet by id
      description: >-
        Get a packet by id for the company currently checked out
      tags:
        - packet
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Packet'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update the state of a packet
      description: >-
        This call allows the state of a packet to be changed.
      tags:
        - packet
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/Packet'
      responses:
        '200':
          $ref: '#/components/responses/Packet'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Remove a data packet
      description: >-
        Delete a data packet by id
      tags:
        - packet
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Packet'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /purchase:
    get:
      summary: Show purchases for this company
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - billing
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/searchParam'
      responses:
        '200':
          $ref: '#/components/responses/ArrayOfPurchases'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Server example operation
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - billing
      requestBody:
        $ref: '#/components/requestBodies/Purchase'
      responses:
        '201':
          $ref: '#/components/responses/Purchase'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/purchase/{id}':
    get:
      summary: Server example operation
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - billing
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Purchase'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /credits:
    get:
      summary: Server example operation
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - billing
      responses:
        '200':
          $ref: '#/components/responses/Credits'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /dashboard:
    get:
      summary: Server example operation
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - reports
      responses:
        '200':
          $ref: '#/components/responses/Dashboard'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/report/{name}':
    get:
      summary: Server example operation
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - reports
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Reports'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /user:
    get:
      summary: Get list of users
      description: >-
        This returns a list of users and their information
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/searchParam'
      responses:
        '200':
          $ref: '#/components/responses/ArrayOfUsers'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Create a user
      description: >-
          This action creates a user
      tags:
        - user
      responses:
        '201':
         $ref: '#/components/responses/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/login:
    get:
      summary: Show the login page
      description: >-
        This action shows the login page
      tags:
        - user
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Authenticate a login request
      description: >-
        This action authenticates a user in the system
      tags:
        - user
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/logout:
    get:
      summary: Log out a user
      description: >-
        This action logs out a user from the system
      tags:
        - user
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/timeout:
    get:
      summary: Timeout a user
      description: >-
        This gets called when a user session has timed out.
      tags:
        - user
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/ping:
    get:
      summary: Detect user activity
      description: >-
          This action is called when user acitivty is detected on the front-end,
          but no other server calls are made.
      tags:
        - user
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/forgotpassword:
    get:
      summary: Password recovery
      description: >-
          This starts the password recovery process for a user.
      tags:
        - user
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Request password recovery
      description: >-
          This captures the email address for password recovery to be performed on.
      tags:
        - user
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/user/simulate/{id}':
    get:
      summary: Simulate another user.
      description: >-
          Simulate your experience as if you were logged in as that user.
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Stop simulating another user
      description: >-
          This stops the simulation of a user and reverts back to the previous logged in user.
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  '/user/{id}':
    get:
      summary: Get a user by id
      description: >-
          This returns a user object
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a user by id
      description: >-
          This action updates a user by id
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Remove a user by id
      description: >-
          This action removes a user from the system
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/policy/{id}':
    get:
      summary: Get a policy by id
      description: >-
          This action gets a policy object by id
      tags:
        - policies
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Policy'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a policy by id
      description: >-
          This action updates a policy by id
      tags:
        - policies
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Policy'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Remove a policy from the system
      description: >-
          This action removes a policy from the system.
      tags:
        - policies
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Policy'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /policy:
    get:
      summary: Get list of policies
      description: >-
        This returns a list of users and their information
      tags:
        - policies
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/searchParam'
      responses:
        '200':
          $ref: '#/components/responses/ArrayOfPolicies'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Create a policy
      description: >-
          This action creates a policy
      tags:
        - policies
      responses:
        '201':
          $ref: '#/components/responses/Policy'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/role/{id}':
    get:
      summary: Get a role by id
      description: >-
          This action gets a role object by id
      tags:
        - roles
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Role'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a role and its attributes.
      description: >-
          This supports assigning policies and users to a role.
          Other attrs are to be included in the POST data
      tags:
        - roles
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Role'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Remove a role by id
      description: >-
          This action removes a role from the system (and its related content)
      tags:
        - roles
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Role'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /role:
    get:
      summary: Get list of roles
      description: >-
        This returns a list of roles and their information
      tags:
        - roles
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/searchParam'
      responses:
        '200':
          $ref: '#/components/responses/ArrayOfRoles'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        #'5xx':
          #$ref: '#/components/responses/ServerError'
    post:
      summary: Create a role object
      description: >-
          This action creates a role object
      tags:
        - roles
      responses:
        '201':
          $ref: '#/components/responses/Role'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /ping:
    get:
      summary: Server heartbeat operation
      description: >-
        This operation shows how to override the global security defined above,
        as we want to open it up for all users.
      tags:
        - system
      security: []
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/reminderly/reminderly-ui/1.0.0
  - url: 'https://virtserver.swaggerhub.com/reminderly/reminderly-ui/v1'
components:
  parameters:
    id:
      name: id
      in: path
      description: ID of resource to interact with.
      required: true
      schema:
        type: integer
        format: int64
    offsetParam:
      name: offset
      in: query
      description: Number of items to skip before returning the results.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
    limitParam:
      name: limit
      in: query
      description: Maximum number of items to return.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
    searchParam:
      name: search
      in: query
      description: Search string for filtering results.
      required: false
      schema:
        type: string
  responses:
    ArrayOfPurchases:
      description: An array of purchases
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArrayOfPurchases'
    ArrayOfUsers:
      description: An array of users
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArrayOfUsers'
    ArrayOfRoles:
      description: An array of roles
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArrayOfRoles'
    ArrayOfPolicies:
      description: An array of policies
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArrayOfPolicies'
    ArrayOfCampaigns:
      description: An array of campaign objects
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArrayOfCampaigns'
    ArrayOfCompanies:
      description: An array of company objects
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArrayOfCompanies'
    ArrayOfPackets:
      description: An array of packet objects
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArrayOfPackets'
    Purchase:
      description: A purchase object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Purchase'
    Credits:
      description: A credit object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Credit'
    Dashboard:
      description: A dashboard object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dashboard'
    Reports:
      description: A report object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Report'
    User:
      description: A user object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    Policy:
      description: A policy object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Policy'
    Role:
      description: A role object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Role'
    Packet:
      description: A data packet
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Packet'
    Campaign:
      description: A campaign
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Campaign'
    Company:
      description: A company
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Company'
    Reminder:
      description: A reminder
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Reminder'
    OK:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OK'
    BadRequest:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The resource with the specified ID was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Unexpected server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    GenericObject:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        body:
          type: object
      required:
        - id
        - body
    ArrayOfPurchases:
      type: array
      items:
        $ref: '#/components/schemas/Purchase'
    ArrayOfUsers:
      type: array
      items:
        $ref: '#/components/schemas/User'
    ArrayOfRoles:
      type: array
      items:
        $ref: '#/components/schemas/Role'
    ArrayOfPolicies:
      type: array
      items:
        $ref: '#/components/schemas/Policy'
    ArrayOfPackets:
      type: array
      items:
        $ref: '#/components/schemas/Packet'
    ArrayOfCampaigns:
      type: array
      items:
        $ref: '#/components/schemas/Campaign'
    ArrayOfCompanies:
      type: array
      items:
        $ref: '#/components/schemas/Company'
    Credit:
      $ref: '#/components/schemas/GenericObject'
    Purchase:
      $ref: '#/components/schemas/GenericObject'
    User:
      $ref: '#/components/schemas/GenericObject'
    Role:
      $ref: '#/components/schemas/GenericObject'
    Policy:
      $ref: '#/components/schemas/GenericObject'
    Packet:
      $ref: '#/components/schemas/GenericObject'
    Campaign:
      $ref: '#/components/schemas/GenericObject'
    Company:
      $ref: '#/components/schemas/GenericObject'
    Dashboard:
      $ref: '#/components/schemas/GenericObject'
    Report:
      $ref: '#/components/schemas/GenericObject'
    Reminder:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        appt_date:
          type: string
          readOnly: true
        action:
          type: string
          enum: [confirm,cancel,reschedule,unsubscribe]
          writeOnly: true
        body:
          type: object
      required:
        - id
        - appt_date
        - body
    OK:
      type: object
      properties:
        response:
          type: string
    # Schema for error response body
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  requestBodies:
    Purchase:
      content:
          application/json:
            schema:
              $ref: '#/components/schemas/Purchase'
    Packet:
      content:
          application/json:
            schema:
              $ref: '#/components/schemas/Packet'
    Campaign:
      content:
          application/json:
            schema:
              $ref: '#/components/schemas/Campaign'
    Company:
      content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
    Reminder:
      content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reminder'
  securitySchemes:
    accessCode:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'http://reminderly.io/oauth/auth'
          tokenUrl: 'http://reminderly.io/oauth/token'
          scopes:
            write: allows modifying resources
            read: allows reading resources