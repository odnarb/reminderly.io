openapi: 3.0.0
info:
  version: "1.0.0"
  title: Reminderly.io UI
  description: This is the reminderly.io UI API
security:
  - accessCode:
      - read
      - write
paths:
  '/reminder/{id}':
    get:
      summary: Get a reminder
      description: >-
        Gets a reminder based on id
      tags:
        - reminders
      parameters:
        - name: id
          in: path
          description: ID of reminder to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a reminder based on id
      description: >-
        Update a reminder's status (confirm,cancel,reschedule,unsubscribe,etc)
      tags:
        - reminders
      parameters:
        - name: id
          in: path
          description: ID of reminder to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /company:
    get:
      summary: Get all companies listed
      description: >-
        This gets all companies
      tags:
        - company
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: search
          schema:
            type: string
          required: false
          description: Search string to use
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/company/{id}':
    get:
      summary: Get a company's information
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - company
      parameters:
        - name: id
          in: path
          description: ID of company to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update company information
      description: >-
        Add locations, customers, etc to the company
      tags:
        - company
      parameters:
        - name: id
          in: path
          description: ID of company to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a company from the system
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - company
      parameters:
        - name: id
          in: path
          description: ID of company to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/company/checkout/{id}':
    get:
      summary: Change company context
      description: >-
        This updates the user's context as to what company is currently being used/worked.
      tags:
        - company
      parameters:
        - name: id
          in: path
          description: ID of company to checkout
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /campaign:
    get:
      summary: Get campaigns for current company
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - campaigns
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Create a campaign
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - campaigns
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/campaign/{id}':
    get:
      summary: Get a campaign by id
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - campaigns
      parameters:
        - name: id
          in: path
          description: ID of campaign to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a campaign
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - campaigns
      parameters:
        - name: id
          in: path
          description: ID of campaign to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a campaign
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - campaigns
      parameters:
        - name: id
          in: path
          description: ID of campaign to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /packet:
    get:
      summary: Get data packets for the current company
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - packet
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Create a packet for the current company
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - packet
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/packet/{id}':
    get:
      summary: Get a packet by id
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - packet
      parameters:
        - name: id
          in: path
          description: ID of packet to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update the state of a packet
      description: >-
        This call allows the state of a packet to be changed.
      tags:
        - packet
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Remove a data packet
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - packet
      parameters:
        - name: id
          in: path
          description: ID of packet to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /purchase:
    get:
      summary: Server example operation
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - billing
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Server example operation
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - billing
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/purchase/{id}':
    get:
      summary: Server example operation
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - billing
      parameters:
        - name: id
          in: path
          description: ID of purchase to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /credits:
    get:
      summary: Server example operation
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - billing
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /dashboard:
    get:
      summary: Server example operation
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - reports
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/report/{name}':
    get:
      summary: Server example operation
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - reports
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /user:
    get:
      summary: Get list of users
      description: >-
        This returns a list of users and their information
      tags:
        - user
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: search
          schema:
            type: string
          required: false
          description: Search string to use
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Create a user
      description: >-
          This action creates a user
      tags:
        - user
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/login:
    get:
      summary: Show the login page
      description: >-
        This action shows the login page
      tags:
        - user
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: User login
      description: >-
        This action authenticates a user in the system
      tags:
        - user
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/logout:
    get:
      summary: Server example operation
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - user
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/timeout:
    get:
      summary: Server example operation
      description: >-
        This is an example operation to show how security is applied to the
        call.
      tags:
        - user
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/ping:
    get:
      summary: Server example operation
      description: >-
          This is an example operation to show how security is applied to the
          call.
      tags:
        - user
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/forgotpassword:
    get:
      summary: Server example operation
      description: >-
          This is an example operation to show how security is applied to the
          call.
      tags:
        - user
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Server example operation
      description: >-
          This is an example operation to show how security is applied to the
          call.
      tags:
        - user
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/user/simulate/{id}':
    get:
      summary: Simulate another user.
      description: >-
          Simulate your experience as if you were logged in as that user.
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: ID of user to simulate
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/user/{id}':
    get:
      summary: Server example operation
      description: >-
          This is an example operation to show how security is applied to the
          call.
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Server example operation
      description: >-
          This is an example operation to show how security is applied to the
          call.
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: ID of user to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Server example operation
      description: >-
          This is an example operation to show how security is applied to the
          call.
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/policy/{id}':
    get:
      summary: Server example operation
      description: >-
          This is an example operation to show how security is applied to the
          call.
      tags:
        - policies
      parameters:
        - name: id
          in: path
          description: ID of policy to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Server example operation
      description: >-
          This is an example operation to show how security is applied to the
          call.
      tags:
        - policies
      parameters:
        - name: id
          in: path
          description: ID of policy to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Server example operation
      description: >-
          This is an example operation to show how security is applied to the
          call.
      tags:
        - policies
      parameters:
        - name: id
          in: path
          description: ID of policy to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /policy:
    get:
      summary: Get list of policies
      description: >-
        This returns a list of users and their information
      tags:
        - policies
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: search
          schema:
            type: string
          required: false
          description: Search string to use
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Server example operation
      description: >-
          This is an example operation to show how security is applied to the
          call.
      tags:
        - policies
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/role/{id}':
    get:
      summary: Server example operation
      description: >-
          This is an example operation to show how security is applied to the
          call.
      tags:
        - roles
      parameters:
        - name: id
          in: path
          description: ID of role to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a role and its attributes.
      description: >-
          This supports assigning policies and users to a role.
          Other attrs are to be included in the POST data
      tags:
        - roles
      parameters:
        - name: id
          in: path
          description: ID of role to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Server example operation
      description: >-
          This is an example operation to show how security is applied to the
          call.
      tags:
        - roles
      parameters:
        - name: id
          in: path
          description: ID of role to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /role:
    get:
      summary: Get list of roles
      description: >-
        This returns a list of roles and their information
      tags:
        - roles
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: search
          schema:
            type: string
          required: false
          description: Search string to use
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Server example operation
      description: >-
          This is an example operation to show how security is applied to the
          call.
      tags:
        - roles
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /ping:
    get:
      summary: Server heartbeat operation
      description: >-
        This operation shows how to override the global security defined above,
        as we want to open it up for all users.
      tags:
        - system
      security: []
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/reminderly/reminderly-ui/1.0.0
  - url: 'https://virtserver.swaggerhub.com/reminderly/reminderly-ui/v1'
components:
  responses:
    # '200':
    #   description: OK
    # '400':
    #   description: Bad request. User ID must be an integer and larger than 0.
    # '401':
    #   description: Authorization information is missing or invalid.
    # '404':
    #   description: A user with the specified ID was not found.
    # '5XX':
    #   description: Unexpected error.
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    # Schema for error response body
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  securitySchemes:
    accessCode:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'http://reminderly.io/oauth/auth'
          tokenUrl: 'http://reminderly.io/oauth/token'
          scopes:
            write: allows modifying resources
            read: allows reading resources