x- create db
x- create mock schema
x- create mock get messages table / data / proc
x- create node.js app to get messages from mysql db depending on run type
    x - update table to say batch is complete (stored proc)
x- flesh out db schema
x- flesh out logging tables
- plan better solution for storing logs
    http://brian.moonspot.net/logging-with-mysql

x- DONE - need logging tables

x -DONE -- TODO: figure role company restriction (or allow list) via role table
		--NO.. this should be handled by using group access to allow access to many companies
		-- otherwise, we'd be introducing "blacklist" vs "whitelist" which is dumb in a least-privs security system

- need log offloader script
	like the _history tables, we'll create a similar algo:
	create table log_something_new
	rename current to log_something_41820190001
	rename log_something_new to log_something
	dump bkup_log_* to .sql file (and zip it)
	drop tables with bkup_log_*



-- proc moves data to history tables

-- table of processed flags
-- table of contact methods
-- table of contact status / description
-- figure out a shard method


- flesh out ui supported features/actions
- plan api gateway / api endpoints for supporting the platform
- write with swagger

- stored procs for maintenance fleshed out
- stored procs fleshed out: temp tables, where clauses
- write stored procs

- plan indices
- write indices
- create tests for failures ..?
- create tests
