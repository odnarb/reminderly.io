Sending Architecture
-----------------------

Build:
    --Create SQS and lambda poller per packet
    --Use a lambda to create this set

Teardown:
    --Remove when campaign is removed
    --Use a lambda to remove this set

Lambda: get packets and their data
    --send to appropriate SQS depending on the packet

SQS:
    --each packet (campaign) gets its own SQS queue
    --limitation for now is 120k per queue (campaign)

Lambda:
    --poll its SQS queue

-----------------------------------------

Incoming and outgoing messages
---------------------------------------
Lambda(sendContact_step1)
pull from DB and send to SQS

--packet_data_getter.js
    --get contacts and push into SQS
--packet_silencer.js
    --set packet as fetched

Lambda(sendContact_step2)
poll from SQS and send to API service for contact

--sendContacts.js

Lambda(disposition_step1)
-from API Gateway
-send to SQS

Lambda(disposition_step2)
-poll from SQS
-send to DB

Lambda(incoming_step1)
-from API Gateway
-send to SQS

Lambda(incoming_step2)
-poll from SQS
-send to DB

Data ingest - the action of taking a file and loading it into the DB
------------------------------------------------------------------------------------------
--Upload from portal (or API later)
--Find the data sources that haven't been loaded
--find the file name
--try to load that file into its appropriate data table
--track results and progress

Data mapping -- the action of pulling fields from data and applying a message format to it.
------------------------------------------------------------------------------------------
--Create a SQL script to accept different formats
--campaign definitions define contact window, message format (or mapping), confirm/cancel/reschedule options, contact methods,
--this is a stored proc or series of stored procs
--packet data moves into campaign table after message construction (data mapping)

Instant / On-Demand Messaging
------------------------------
--create an on-demand campaign
--data is loaded into its own packet table
--data is mapped and whatnot 
--but contacts are sent immediately when ready
page source (one-liner or data packet) -> From API Gateway -> Lambda(on-demand)
-> DB (gets inserted as an on-demand msg)
-> SQS(email/phone/sms/etc)


Reporting
------------------------------
Reports can be ran against packet tables, depending on the campaign




----------------DB----------------

hard-coded and semi-hard-coded data
------------------------------------------------
contact_methods
contact_status
contact_method_providers
data_ingest_source
data_ingest_stage
message_functions

dynamic data
-----------------------------------------------

packet_1337_07022020_1_data
	--campaign table?
	campaign_data_1337
	--holds historical data up to a full month
	campaign_data_1337_05312020
	campaign_data_1337_04302020
	--holds historical data starting with date tag
data_packet
packet_table_tracking
company
users
user-company access
	--assume no access
company_campaigns

sms_unsubscribe
email_unsubscribe
phone_unsubscribe